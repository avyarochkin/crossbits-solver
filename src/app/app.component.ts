import { Component } from '@angular/core';
import { Solver } from './solver';

@Component({
    selector: 'app-root',
    templateUrl: './app.component.html',
    styleUrls: ['./app.component.css']
})
export class AppComponent {
    title = 'Solver';
    hintLines = [
        [1],
        [2],
        [3],
        [1,1],
        [1,2],
        [1,3],
        [2,1],
        [2,2],
        [2,3],
        [3,1],
        [3,2],
        [3,3],
        [1,1,1],
        [1,1,2],
        [1,2,1],
        [1,2,2],
        [2,1,1],
        [2,1,2],
        [2,2,1],
        [2,2,2]
    ];
    boardData = [
        [-1,-1,-1,-1],
        [-1,-1,-1, 0],
        [-1,-1,-1, 1],
        [-1,-1, 0,-1],
        [-1,-1, 0, 0],
        [-1,-1, 0, 1],
        [-1,-1, 1,-1],
        [-1,-1, 1, 0],
        [-1,-1, 1, 1],
        [-1, 0,-1,-1],
        [-1, 0,-1, 0],
        [-1, 0,-1, 1],
        [-1, 0, 0,-1],
        [-1, 0, 0, 0],
        [-1, 0, 0, 1],
        [-1, 0, 1,-1],
        [-1, 0, 1, 0],
        [-1, 0, 1, 1],
        [-1, 1,-1,-1],
        [-1, 1,-1, 0],
        [-1, 1,-1, 1],
        [-1, 1, 0,-1],
        [-1, 1, 0, 0],
        [-1, 1, 0, 1],
        [-1, 1, 1,-1],
        [-1, 1, 1, 0],
        [-1, 1, 1, 1],

        [0,-1,-1,-1],
        [0,-1,-1, 0],
        [0,-1,-1, 1],
        [0,-1, 0,-1],
        [0,-1, 0, 0],
        [0,-1, 0, 1],
        [0,-1, 1,-1],
        [0,-1, 1, 0],
        [0,-1, 1, 1],
        [0, 0,-1,-1],
        [0, 0,-1, 0],
        [0, 0,-1, 1],
        [0, 0, 0,-1],
        [0, 0, 0, 0],
        [0, 0, 0, 1],
        [0, 0, 1,-1],
        [0, 0, 1, 0],
        [0, 0, 1, 1],
        [0, 1,-1,-1],
        [0, 1,-1, 0],
        [0, 1,-1, 1],
        [0, 1, 0,-1],
        [0, 1, 0, 0],
        [0, 1, 0, 1],
        [0, 1, 1,-1],
        [0, 1, 1, 0],
        [0, 1, 1, 1],

        [1,-1,-1,-1],
        [1,-1,-1, 0],
        [1,-1,-1, 1],
        [1,-1, 0,-1],
        [1,-1, 0, 0],
        [1,-1, 0, 1],
        [1,-1, 1,-1],
        [1,-1, 1, 0],
        [1,-1, 1, 1],
        [1, 0,-1,-1],
        [1, 0,-1, 0],
        [1, 0,-1, 1],
        [1, 0, 0,-1],
        [1, 0, 0, 0],
        [1, 0, 0, 1],
        [1, 0, 1,-1],
        [1, 0, 1, 0],
        [1, 0, 1, 1],
        [1, 1,-1,-1],
        [1, 1,-1, 0],
        [1, 1,-1, 1],
        [1, 1, 0,-1],
        [1, 1, 0, 0],
        [1, 1, 0, 1],
        [1, 1, 1,-1],
        [1, 1, 1, 0],
        [1, 1, 1, 1]
    ];

    prettify(data: number[]) {
        return data.reduce((prev, e) => { return prev + "∗X♦"[e+1] }, "")
    }

    fits(hintIndex: number, dataIndex: number) {
        return this.boardData[dataIndex].length >= this.hintLines[hintIndex].reduce((prev, curr) => { return prev + curr }, 0) + this.hintLines[hintIndex].length - 1
    }

    solve(hintIndex: number, dataIndex: number) {

        let solver = new Solver(
            this.boardData[dataIndex],
            this.hintLines[hintIndex].map(item => { return { hint: item }}));
        solver.solveLine(0);
    }
}
